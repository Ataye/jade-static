// Generated by CoffeeScript 1.10.0
(function() {
  var checkFileAndProcess, fs, jade, path, readAndSendTemplate;

  path = require('path');

  fs = require('fs');

  jade = require('jade');

  readAndSendTemplate = function(d, options, res, next) {
    return fs.readFile(d, 'utf8', function(err, data) {
      var error, html, template;
      if (err != null) {
        return next();
      }
      try {
        if (options == null) {
          options = {
            filename: d
          };
        } else {
          options.filename = d;
        }
        template = jade.compile(data, options);
        html = template({});
        return res.send(html, {
          'Content-Type': 'text/html'
        }, 200);
      } catch (error) {
        err = error;
        return next(err);
      }
    });
  };

  checkFileAndProcess = function(d, options, res, next) {
    return fs.lstat(d, function(err, stats) {
      if ((err == null) && stats.isFile()) {
        return readAndSendTemplate(d, options, res, next);
      } else {
        return next();
      }
    });
  };

  module.exports = function(options) {
    if (options == null) {
      throw new Error("A path must be specified.");
    }
    if (typeof options === 'string') {
      options = {
        src: options,
        html: true
      };
    }
    if (typeof options.html === 'undefined') {
      options.html = true;
    }
    return function(req, res, next) {
      var d;
      d = path.join(options.src, req.url.split('?')[0]);
      return fs.lstat(d, function(err, stats) {
        if ((err == null) && stats.isDirectory()) {
          return checkFileAndProcess(d + "/index.jade", options.jade, res, next);
        } else if ((err == null) && stats.isFile() && path.extname(d) === '.jade') {
          return readAndSendTemplate(d, options.jade, res, next);
        } else if ((options.html != null) && path.extname(d) === '.html') {
          return checkFileAndProcess(d.replace(/html$/, 'jade'), options.jade, res, next);
        } else {
          return next();
        }
      });
    };
  };

}).call(this);
